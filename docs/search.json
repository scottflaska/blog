[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "Exploring PGA Shotlink Data\n\n\n\n\n\n\n\nshotlink\n\n\ngolf\n\n\nr\n\n\neda\n\n\n\n\n\n\n\n\n\n\n\nApr 10, 2023\n\n\nScott Flaska\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApr 2, 2023\n\n\nScott Flaska\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am a data scientist - currently working as the senior manager of football analytics for the Denver Broncos. In my current role, I collaborate with the football operations departments to design, plan, and implement projects that help improve decision-making and efficiency across the organization."
  },
  {
    "objectID": "posts/dvc/index.html",
    "href": "posts/dvc/index.html",
    "title": "DVC!",
    "section": "",
    "text": "Data Version Control (DVC) is a tool I’ve found helpful for data science projects. I came across DVC while looking for a better way to manage datasets and models within our Football Technology and Research group at the Broncos. In fact, I've found it so helpful and easy to use, that I'm shocked that I don't see it discussed more frequently in some of the communities I follow online (mostly R and football analytics).\nLast May I shared a brief introduction to DVC with other NFL data scientists and software developers at our annual conference. I figured I would repost it here for anyone that might find it useful.\ndvc push"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome!",
    "section": "",
    "text": "Welcome to my blog! Hoping to post (somewhat) frequently on data science, sports analytics, and other topics."
  },
  {
    "objectID": "home.html",
    "href": "home.html",
    "title": "Home",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "DVC!\n\n\n\n\n\n\n\nversion control\n\n\ngit\n\n\ndevops\n\n\n\n\n\n\n\n\n\n\n\nApr 5, 2023\n\n\nScott Flaska\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApr 2, 2023\n\n\nScott Flaska\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/shotlink_explore/index.html",
    "href": "posts/shotlink_explore/index.html",
    "title": "Exploring PGA Shotlink Data",
    "section": "",
    "text": "Last year, I found some sample data while reading about PGA Shotlink1. I decided to put together a series of posts using this data. This first post will cover some simple data cleaning and visualization.\nThe sample contains 4 delimited text files: event-level, hole-level, round-level, and shot-level. I’ll focus on the shot-level data in this post.\n\nlibrary(tidyverse)\n\n\nshot_level <- read.delim(file ='shotlink_sample/StrokeLevelTOURChamp.txt')\nstr(shot_level)\n\n'data.frame':   8422 obs. of  38 variables:\n $ tour_code                      : chr  \"R\" \"R\" \"R\" \"R\" ...\n $ tour_description               : chr  \"PGA TOUR\" \"PGA TOUR\" \"PGA TOUR\" \"PGA TOUR\" ...\n $ year                           : int  2011 2011 2011 2011 2011 2011 2011 2011 2011 2011 ...\n $ tourn_num                      : int  410 410 410 410 410 410 410 410 410 410 ...\n $ Player..                       : int  1810 1810 1810 1810 1810 1810 1810 1810 1810 1810 ...\n $ Course..                       : int  688 688 688 688 688 688 688 688 688 688 ...\n $ Permanent.Tournament..         : int  60 60 60 60 60 60 60 60 60 60 ...\n $ Player.First.Name              : chr  \"Phil\" \"Phil\" \"Phil\" \"Phil\" ...\n $ Player.Last.Name               : chr  \"Mickelson\" \"Mickelson\" \"Mickelson\" \"Mickelson\" ...\n $ Round                          : int  1 1 1 1 1 1 1 1 1 1 ...\n $ Tournament.Name                : chr  \"TOUR Championship by Coca-Cola\" \"TOUR Championship by Coca-Cola\" \"TOUR Championship by Coca-Cola\" \"TOUR Championship by Coca-Cola\" ...\n $ Course.Name                    : chr  \"East Lake GC\" \"East Lake GC\" \"East Lake GC\" \"East Lake GC\" ...\n $ Hole                           : int  1 1 1 1 2 2 3 3 3 3 ...\n $ Hole.Score                     : int  4 4 4 4 2 2 4 4 4 4 ...\n $ Par.Value                      : int  4 4 4 4 3 3 4 4 4 4 ...\n $ Yardage                        : int  424 424 424 424 214 214 387 387 387 387 ...\n $ Shot                           : int  1 2 3 4 1 2 1 2 3 4 ...\n $ Shot.Type.S.P.D.               : chr  \"S\" \"S\" \"S\" \"S\" ...\n $ X..of.Strokes                  : int  1 1 1 1 1 1 1 1 1 1 ...\n $ From.Location.Scorer.          : chr  \"Tee Box\" \"Primary Rough\" \"Green\" \"Green\" ...\n $ From.Location.Laser.           : chr  \"\" \"Right Rough\" \"Unknown\" \"Unknown\" ...\n $ To.Location.Scorer.            : chr  \"Primary Rough\" \"Green\" \"Green\" \"\" ...\n $ To.Location.Laser.             : chr  \"Right Rough\" \"Unknown\" \"Unknown\" \"\" ...\n $ Distance                       : int  10677 4932 326 39 7727 231 10069 3309 150 14 ...\n $ Distance.to.Pin                : int  15444 4788 281 39 7812 231 13464 3440 132 14 ...\n $ In.the.Hole.Flag               : chr  \"N\" \"N\" \"N\" \"Y\" ...\n $ Around.the.Green.Flag          : chr  \"N\" \"N\" \"N\" \"N\" ...\n $ X1st.Putt.Flag                 : chr  \"\" \"\" \"Y\" \"\" ...\n $ Distance.to.Hole.after.the.Shot: int  4788 281 39 0 231 0 3440 132 14 0 ...\n $ Time                           : int  1255 1300 1304 1305 1307 1312 1315 1320 1324 1324 ...\n $ Lie                            : chr  \"Good\" \"N/A\" \"Good\" \"Good\" ...\n $ Elevation                      : chr  \"With\" \"With\" \"With\" \"With\" ...\n $ Slope                          : chr  \"Level\" \"Level\" \"Level\" \"Level\" ...\n $ X.Coordinate                   : chr  \"9,093.97\" \"8,683.75\" \"8,697.45\" \"0\" ...\n $ Y.Coordinate                   : chr  \"9,859.90\" \"9,868.71\" \"9,845.29\" \"0\" ...\n $ Z.Coordinate                   : num  480 504 504 0 491 ...\n $ Distance.from.Center           : int  562 232 33 0 214 0 127 15 2 0 ...\n $ Distance.from.Edge             : int  126 25 199 0 347 0 344 32 140 0 ...\n\n\nThis table has a ton of interesting fields to explore, but first I want to clean up the column names - the janitor package makes this really easy.\n\nshot_level_clean <- shot_level %>% \n  janitor::clean_names() %>% \n  rename(num_of_strokes = x_of_strokes,\n         first_putt_flag = x1st_putt_flag)\n\nshot_level_clean %>% \n  colnames() %>% \n  head(10) \n\n [1] \"tour_code\"            \"tour_description\"     \"year\"                \n [4] \"tourn_num\"            \"player\"               \"course\"              \n [7] \"permanent_tournament\" \"player_first_name\"    \"player_last_name\"    \n[10] \"round\"               \n\n\nNext, I’d like to get a feel for the scope of the data.\n\n#How many tournaments/rounds?\nshot_level_clean %>% \n  select(year, tournament_name, round) %>% \n  distinct()\n\n  year                tournament_name round\n1 2011 TOUR Championship by Coca-Cola     1\n2 2011 TOUR Championship by Coca-Cola     2\n3 2011 TOUR Championship by Coca-Cola     3\n4 2011 TOUR Championship by Coca-Cola     4\n\n\n\n#How many players?\nshot_level_clean %>% \n  select(player,\n         player_first_name,\n         player_last_name) %>% \n  distinct()\n\n   player player_first_name player_last_name\n1    1810              Phil        Mickelson\n2    2206             David             Toms\n3    6527             Steve         Stricker\n4    6567             Vijay            Singh\n5   20645              John           Senden\n6   21731           Fredrik         Jacobson\n7   21878              Mark           Wilson\n8   21961           Charles       Howell III\n9   22046             Geoff           Ogilvy\n10  22371             Aaron         Baddeley\n11  22405            Justin             Rose\n12  23108              Matt           Kuchar\n13  23623                Bo         Van Pelt\n14  23983              Luke           Donald\n15  24357              K.J.             Choi\n16  24502              Adam            Scott\n17  24663              Y.E.             Yang\n18  24781            Hunter            Mahan\n19  24924              Bill             Haas\n20  24925          Jonathan             Byrd\n21  25686             Jason           Dufner\n22  25804             Bubba           Watson\n23  26476              Chez           Reavie\n24  27095              Nick           Watney\n25  27649            Brandt         Snedeker\n26  28089             Jason              Day\n27  29221              Webb          Simpson\n28  30925            Dustin          Johnson\n29  31323              Gary         Woodland\n30  33141            Keegan          Bradley\n\n\n\n#Player scores?\nshot_level_clean %>% \n  group_by(player,\n           player_first_name,\n           player_last_name,\n           round) %>% \n  summarize(shots = n(),\n            .groups = \"keep\") %>% \n  ungroup() %>% \n  mutate(round = paste0(\"round_\",round)) %>% \n  pivot_wider(names_from = round,\n              values_from = shots) %>% \n  as.data.frame() %>% \n  mutate(final_score = round_1 + round_2 + round_3 + round_4) %>% \n  arrange(final_score) %>% \n  select(-player, -player_first_name) %>% \n  head()\n\n  player_last_name round_1 round_2 round_3 round_4 final_score\n1            Mahan      67      68      66      71         272\n2           Donald      66      68      70      69         273\n3             Choi      68      65      70      70         273\n4             Haas      68      67      70      68         273\n5         Baddeley      68      70      64      73         275\n6            Scott      67      65      75      68         275\n\n\nAt first glance, the data looks straightforward: one row for every stroke in the 2011 FedEx Cup Playoffs, with Hunter Mahan defeating the field of 30 with a final score of 272. However, a quick Google search shows that Bill Haas actually won the tournament in a playoff over Hunter Mahan. Referencing the docs, the number of strokes assessed actually comes from the # of Strokes2 column (renamed to num_of_strokes above) to account for drops and penalties. Adjusting the code above:\n\nshot_level_clean %>% \n  group_by(player,\n           player_first_name,\n           player_last_name,\n           round) %>% \n  summarize(shots = sum(num_of_strokes),\n            .groups = \"keep\") %>% \n  ungroup() %>% \n  mutate(round = paste0(\"round_\",round)) %>% \n  pivot_wider(names_from = round,\n              values_from = shots) %>% \n  as.data.frame() %>% \n  mutate(final_score = round_1 + round_2 + round_3 + round_4) %>% \n  arrange(final_score) %>% \n  select(-player, -player_first_name) %>% \n  head()\n\n  player_last_name round_1 round_2 round_3 round_4 final_score\n1            Mahan      67      68      66      71         272\n2             Haas      68      67      69      68         272\n3         Baddeley      68      69      64      72         273\n4           Donald      66      68      70      69         273\n5             Choi      68      65      70      70         273\n6       Howell III      67      71      68      68         274\n\n\nThese scores match the round-level scores on the Wikipedia page, which is good enough for me.\nNext - I want to take a look at the x/y/z coordinate data. The docs give definitions for these fields:\n\nThe X coordinate in an X/Y/Z grid system used by lasers to pinpoint the ball when the shot ends. The value is zeros for the shot that finishes in the hole. The numbers in the grid system represent feet.\nThe Y coordinate in an X/Y/Z grid system used by lasers to pinpoint the ball when the shot ends. The value is zeros for the shot that finishes in the hole. The numbers in the grid system represent feet.\nThe Z coordinate in an X/Y/Z grid system used by lasers to pinpoint the ball when the shot ends. The value is zeros for the shot that finishes in the hole. The numbers in the grid system represent feet, and ‘Z’ is the vertical component of the position.\n\nThe shot that finishes in the hole will get 0 values, but these definitions don’t indicate whether the coordinates are relative to each hole or the overall course. Plotting the shots should help clear this up. Additionally, I need to convert the coordinate columns from character to numeric .\n\nlibrary(ggplot2)\n\n\nshot_level_clean %>% \n  mutate(x = str_replace_all(string = x_coordinate,\n                             pattern = \",\",\n                             replacement = \"\")) %>%\n  mutate(y = str_replace_all(string = y_coordinate,\n                             pattern = \",\",\n                             replacement = \"\")) %>% \n  mutate(z = str_replace_all(string = z_coordinate,\n                             pattern = \",\",\n                             replacement = \"\")) %>% \n  mutate(x = as.numeric(x),\n         y = as.numeric(y),\n         z = as.numeric(z)) %>% \n  ggplot(mapping = aes(x = x,\n                       y = y)) +\n  geom_point()\n\n\n\n\nThe non-zero shot coordinates look like a golf course, so I think it makes sense to set the 0 values to NA since the coordinates to not appear to match the grid system.\n\nshot_level_clean_coords <- shot_level_clean %>% \n  mutate(x = str_replace_all(string = x_coordinate,\n                             pattern = \",\",\n                             replacement = \"\")) %>%\n  mutate(y = str_replace_all(string = y_coordinate,\n                             pattern = \",\",\n                             replacement = \"\")) %>% \n  mutate(z = str_replace_all(string = z_coordinate,\n                             pattern = \",\",\n                             replacement = \"\")) %>% \n  mutate(x = as.numeric(x),\n         y = as.numeric(y),\n         z = as.numeric(z)) %>% \n  mutate(x = ifelse(x == 0,NA,x),\n         y = ifelse(y == 0,NA,y),\n         z = ifelse(z == 0,NA,z)) %>% \n  select(-x_coordinate,\n         -y_coordinate,\n         -z_coordinate)\n\nshot_level_clean_coords %>% \n  filter(!is.na(x)) %>% \n  mutate(hole = factor(hole, ordered = T)) %>%\n  ggplot(mapping = aes(x = x,\n                       y = y,\n                       color = hole)) +\n  geom_point() +\n  coord_equal() +\n  theme(axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.title = element_blank(),\n        panel.background = element_blank())\n\n\n\n\nDefinitely looks like a golf course, especially when you overlay it on top of the Google Maps view of East Lake Golf Club in Atlanta:\n\nNext I’d like to take a look at the cut3 information for each shot. The table has two columns with this information:\n\nTo Location (Scorer): General location from which the shot hit ended as recorded by the walking scorer\nTo Location (Laser): Enhanced location from which the shot hit ended as recorded by a laser device which tracks ball position using coordinates on a course map\n\n\nshot_level_clean_coords %>% \n  filter(!is.na(x)) %>% \n  group_by(to_location_laser,\n           to_location_scorer) %>%\n  summarize(rows = n(),\n            .groups = \"keep\") %>% \n  as.data.frame() %>% \n  arrange(desc(rows))\n\n                to_location_laser to_location_scorer rows\n1                         Unknown              Green 3548\n2                    Left Fairway            Fairway  578\n3                   Right Fairway            Fairway  550\n4                      Left Rough      Primary Rough  436\n5                     Right Rough      Primary Rough  401\n6              Right Intermediate Intermediate Rough  145\n7               Left Intermediate Intermediate Rough  112\n8                         Unknown     Fairway Bunker   92\n9         Right Green Side Bunker  Green Side Bunker   77\n10  Right Front Green Side Bunker  Green Side Bunker   66\n11   Front Left Green Side Bunker  Green Side Bunker   60\n12         Left Green Side Bunker  Green Side Bunker   47\n13 Front Center Green Side Bunker  Green Side Bunker   34\n14                        Unknown       Tree Outline   24\n15                        Unknown              Water   23\n16                        Unknown            Unknown   20\n17                        Unknown         Water Drop   13\n18    Left Rear Green Side Bunker  Green Side Bunker    3\n19                   Left Fairway             Fringe    2\n20                  Right Fairway             Fringe    2\n21   Right Rear Green Side Bunker  Green Side Bunker    1\n22                        Unknown       Dirt Outline    1\n\n\nThe columns seem to match up pretty well, but I’d like to consolidate them into a more general `to_location_cut` column.\n\nshot_level_clean_coords_cut <- shot_level_clean_coords %>% \n  mutate(to_location_cut = case_when(to_location_scorer %in% c('Fairway','Fringe') ~ 'fairway',\n                                     to_location_scorer %in% c('Fairway Bunker','Green Side Bunker') ~ 'bunker',\n                                     to_location_scorer %in% c('Intermediate Rough','Primary Rough') ~ 'rough',\n                                     to_location_scorer == 'Green' ~ 'green',\n                                     to_location_scorer == 'Water' ~ 'water',\n                                     \n                                     is.na(x) ~ 'hole',\n                                     T ~ 'other'))\n\nshot_level_clean_coords_cut %>% \n  filter(!is.na(x)) %>% \n  group_by(to_location_laser,\n           to_location_scorer,\n           to_location_cut) %>%\n  summarize(rows = n(),\n            .groups = \"keep\") %>% \n  as.data.frame() %>% \n  arrange(desc(rows))\n\n                to_location_laser to_location_scorer to_location_cut rows\n1                         Unknown              Green           green 3548\n2                    Left Fairway            Fairway         fairway  578\n3                   Right Fairway            Fairway         fairway  550\n4                      Left Rough      Primary Rough           rough  436\n5                     Right Rough      Primary Rough           rough  401\n6              Right Intermediate Intermediate Rough           rough  145\n7               Left Intermediate Intermediate Rough           rough  112\n8                         Unknown     Fairway Bunker          bunker   92\n9         Right Green Side Bunker  Green Side Bunker          bunker   77\n10  Right Front Green Side Bunker  Green Side Bunker          bunker   66\n11   Front Left Green Side Bunker  Green Side Bunker          bunker   60\n12         Left Green Side Bunker  Green Side Bunker          bunker   47\n13 Front Center Green Side Bunker  Green Side Bunker          bunker   34\n14                        Unknown       Tree Outline           other   24\n15                        Unknown              Water           water   23\n16                        Unknown            Unknown           other   20\n17                        Unknown         Water Drop           other   13\n18    Left Rear Green Side Bunker  Green Side Bunker          bunker    3\n19                   Left Fairway             Fringe         fairway    2\n20                  Right Fairway             Fringe         fairway    2\n21   Right Rear Green Side Bunker  Green Side Bunker          bunker    1\n22                        Unknown       Dirt Outline           other    1\n\n\nNext - I want to plot `to_location_cut` to see how it looks.\n\ncut_colors = c('bunker'='tan',\n               'fairway'='#4CBB17',\n               'green'='#90EE90',\n               'rough'='#355E3B',\n               'other'='red',\n               'water'='lightblue')\n\nshot_level_clean_coords_cut %>% \n  filter(!is.na(x)) %>% \n  mutate(hole = factor(hole, ordered = T)) %>%\n  ggplot(mapping = aes(x = x,\n                       y = y)) +\n  geom_point(mapping = aes(color = to_location_cut),\n             size = 1) +\n  coord_equal() +\n  scale_color_manual(values = cut_colors) +\n  theme(axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.title = element_blank(),\n        panel.grid = element_blank())\n\n\n\n\n\nshot_level_clean_coords_cut %>% \n  filter(!is.na(x)) %>% \n  filter(hole == 1) %>% \n  mutate(hole = factor(hole, ordered = T)) %>%\n  ggplot(mapping = aes(x = x,\n                       y = y)) +\n  geom_point(mapping = aes(color = to_location_cut),\n             size = 2) +\n  coord_equal() +\n  scale_color_manual(values = cut_colors) +\n  labs(title = \"1st Hole\") +\n  theme(axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.title = element_blank(),\n        panel.grid = element_blank())\n\n\n\n\n\nsaveRDS(object = shot_level_clean_coords_cut, file = \"shot_level.rds\")\nsaveRDS(object = cut_colors, file = \"cut_colors.rds\")\n\n\n\n\n\nFootnotes\n\n\nThe data was available here, but it looks like it’s been moved.↩︎\n# of Strokes (1 digit numeric): The number of strokes assessed for this shot. In most cases, this will be ‘1’, but it may be ‘0’ for a drop or ‘2’ for a 2-stroke penalty.↩︎\nfairway, rough, green, etc.↩︎"
  },
  {
    "objectID": "posts/01_welcome/index.html",
    "href": "posts/01_welcome/index.html",
    "title": "Welcome!",
    "section": "",
    "text": "Welcome to my blog! Hoping to post (somewhat) frequently on data science, sports analytics, and other topics."
  },
  {
    "objectID": "posts/02_shotlink_explore/index.html",
    "href": "posts/02_shotlink_explore/index.html",
    "title": "Exploring PGA Shotlink Data",
    "section": "",
    "text": "Last year, I found some sample data while reading about PGA Shotlink1. I decided to put together a series of posts using this data. This first post will cover some simple data cleaning and visualization.\nThe sample contains 4 delimited text files: event-level, hole-level, round-level, and shot-level. I’ll focus on the shot-level data in this post.\n\nlibrary(tidyverse)\n\n\nshot_level <- read.delim(file ='shotlink_sample/StrokeLevelTOURChamp.txt')\nstr(shot_level)\n\n'data.frame':   8422 obs. of  38 variables:\n $ tour_code                      : chr  \"R\" \"R\" \"R\" \"R\" ...\n $ tour_description               : chr  \"PGA TOUR\" \"PGA TOUR\" \"PGA TOUR\" \"PGA TOUR\" ...\n $ year                           : int  2011 2011 2011 2011 2011 2011 2011 2011 2011 2011 ...\n $ tourn_num                      : int  410 410 410 410 410 410 410 410 410 410 ...\n $ Player..                       : int  1810 1810 1810 1810 1810 1810 1810 1810 1810 1810 ...\n $ Course..                       : int  688 688 688 688 688 688 688 688 688 688 ...\n $ Permanent.Tournament..         : int  60 60 60 60 60 60 60 60 60 60 ...\n $ Player.First.Name              : chr  \"Phil\" \"Phil\" \"Phil\" \"Phil\" ...\n $ Player.Last.Name               : chr  \"Mickelson\" \"Mickelson\" \"Mickelson\" \"Mickelson\" ...\n $ Round                          : int  1 1 1 1 1 1 1 1 1 1 ...\n $ Tournament.Name                : chr  \"TOUR Championship by Coca-Cola\" \"TOUR Championship by Coca-Cola\" \"TOUR Championship by Coca-Cola\" \"TOUR Championship by Coca-Cola\" ...\n $ Course.Name                    : chr  \"East Lake GC\" \"East Lake GC\" \"East Lake GC\" \"East Lake GC\" ...\n $ Hole                           : int  1 1 1 1 2 2 3 3 3 3 ...\n $ Hole.Score                     : int  4 4 4 4 2 2 4 4 4 4 ...\n $ Par.Value                      : int  4 4 4 4 3 3 4 4 4 4 ...\n $ Yardage                        : int  424 424 424 424 214 214 387 387 387 387 ...\n $ Shot                           : int  1 2 3 4 1 2 1 2 3 4 ...\n $ Shot.Type.S.P.D.               : chr  \"S\" \"S\" \"S\" \"S\" ...\n $ X..of.Strokes                  : int  1 1 1 1 1 1 1 1 1 1 ...\n $ From.Location.Scorer.          : chr  \"Tee Box\" \"Primary Rough\" \"Green\" \"Green\" ...\n $ From.Location.Laser.           : chr  \"\" \"Right Rough\" \"Unknown\" \"Unknown\" ...\n $ To.Location.Scorer.            : chr  \"Primary Rough\" \"Green\" \"Green\" \"\" ...\n $ To.Location.Laser.             : chr  \"Right Rough\" \"Unknown\" \"Unknown\" \"\" ...\n $ Distance                       : int  10677 4932 326 39 7727 231 10069 3309 150 14 ...\n $ Distance.to.Pin                : int  15444 4788 281 39 7812 231 13464 3440 132 14 ...\n $ In.the.Hole.Flag               : chr  \"N\" \"N\" \"N\" \"Y\" ...\n $ Around.the.Green.Flag          : chr  \"N\" \"N\" \"N\" \"N\" ...\n $ X1st.Putt.Flag                 : chr  \"\" \"\" \"Y\" \"\" ...\n $ Distance.to.Hole.after.the.Shot: int  4788 281 39 0 231 0 3440 132 14 0 ...\n $ Time                           : int  1255 1300 1304 1305 1307 1312 1315 1320 1324 1324 ...\n $ Lie                            : chr  \"Good\" \"N/A\" \"Good\" \"Good\" ...\n $ Elevation                      : chr  \"With\" \"With\" \"With\" \"With\" ...\n $ Slope                          : chr  \"Level\" \"Level\" \"Level\" \"Level\" ...\n $ X.Coordinate                   : chr  \"9,093.97\" \"8,683.75\" \"8,697.45\" \"0\" ...\n $ Y.Coordinate                   : chr  \"9,859.90\" \"9,868.71\" \"9,845.29\" \"0\" ...\n $ Z.Coordinate                   : num  480 504 504 0 491 ...\n $ Distance.from.Center           : int  562 232 33 0 214 0 127 15 2 0 ...\n $ Distance.from.Edge             : int  126 25 199 0 347 0 344 32 140 0 ...\n\n\nThis table has a ton of interesting fields to explore, but first I want to clean up the column names - the janitor package makes this really easy.\n\nshot_level_clean <- shot_level %>% \n  janitor::clean_names() %>% \n  rename(num_of_strokes = x_of_strokes,\n         first_putt_flag = x1st_putt_flag)\n\nshot_level_clean %>% \n  colnames() %>% \n  head(10) \n\n [1] \"tour_code\"            \"tour_description\"     \"year\"                \n [4] \"tourn_num\"            \"player\"               \"course\"              \n [7] \"permanent_tournament\" \"player_first_name\"    \"player_last_name\"    \n[10] \"round\"               \n\n\nNext, I’d like to get a feel for the scope of the data.\n\n#How many tournaments/rounds?\nshot_level_clean %>% \n  select(year, tournament_name, round) %>% \n  distinct()\n\n  year                tournament_name round\n1 2011 TOUR Championship by Coca-Cola     1\n2 2011 TOUR Championship by Coca-Cola     2\n3 2011 TOUR Championship by Coca-Cola     3\n4 2011 TOUR Championship by Coca-Cola     4\n\n\n\n#How many players?\nshot_level_clean %>% \n  select(player,\n         player_first_name,\n         player_last_name) %>% \n  distinct()\n\n   player player_first_name player_last_name\n1    1810              Phil        Mickelson\n2    2206             David             Toms\n3    6527             Steve         Stricker\n4    6567             Vijay            Singh\n5   20645              John           Senden\n6   21731           Fredrik         Jacobson\n7   21878              Mark           Wilson\n8   21961           Charles       Howell III\n9   22046             Geoff           Ogilvy\n10  22371             Aaron         Baddeley\n11  22405            Justin             Rose\n12  23108              Matt           Kuchar\n13  23623                Bo         Van Pelt\n14  23983              Luke           Donald\n15  24357              K.J.             Choi\n16  24502              Adam            Scott\n17  24663              Y.E.             Yang\n18  24781            Hunter            Mahan\n19  24924              Bill             Haas\n20  24925          Jonathan             Byrd\n21  25686             Jason           Dufner\n22  25804             Bubba           Watson\n23  26476              Chez           Reavie\n24  27095              Nick           Watney\n25  27649            Brandt         Snedeker\n26  28089             Jason              Day\n27  29221              Webb          Simpson\n28  30925            Dustin          Johnson\n29  31323              Gary         Woodland\n30  33141            Keegan          Bradley\n\n\n\n#Player scores?\nshot_level_clean %>% \n  group_by(player,\n           player_first_name,\n           player_last_name,\n           round) %>% \n  summarize(shots = n(),\n            .groups = \"keep\") %>% \n  ungroup() %>% \n  mutate(round = paste0(\"round_\",round)) %>% \n  pivot_wider(names_from = round,\n              values_from = shots) %>% \n  as.data.frame() %>% \n  mutate(final_score = round_1 + round_2 + round_3 + round_4) %>% \n  arrange(final_score) %>% \n  select(-player, -player_first_name) %>% \n  head()\n\n  player_last_name round_1 round_2 round_3 round_4 final_score\n1            Mahan      67      68      66      71         272\n2           Donald      66      68      70      69         273\n3             Choi      68      65      70      70         273\n4             Haas      68      67      70      68         273\n5         Baddeley      68      70      64      73         275\n6            Scott      67      65      75      68         275\n\n\nAt first glance, the data looks straightforward: one row for every stroke in the 2011 FedEx Cup Playoffs, with Hunter Mahan defeating the field of 30 with a final score of 272. However, a quick Google search shows that Bill Haas actually won the tournament in a playoff over Hunter Mahan. Referencing the docs, the number of strokes assessed actually comes from the # of Strokes2 column (renamed to num_of_strokes above) to account for drops and penalties. Adjusting the code above:\n\nshot_level_clean %>% \n  group_by(player,\n           player_first_name,\n           player_last_name,\n           round) %>% \n  summarize(shots = sum(num_of_strokes),\n            .groups = \"keep\") %>% \n  ungroup() %>% \n  mutate(round = paste0(\"round_\",round)) %>% \n  pivot_wider(names_from = round,\n              values_from = shots) %>% \n  as.data.frame() %>% \n  mutate(final_score = round_1 + round_2 + round_3 + round_4) %>% \n  arrange(final_score) %>% \n  select(-player, -player_first_name) %>% \n  head()\n\n  player_last_name round_1 round_2 round_3 round_4 final_score\n1            Mahan      67      68      66      71         272\n2             Haas      68      67      69      68         272\n3         Baddeley      68      69      64      72         273\n4           Donald      66      68      70      69         273\n5             Choi      68      65      70      70         273\n6       Howell III      67      71      68      68         274\n\n\nThese scores match the round-level scores on the Wikipedia page, which is good enough for me.\nNext - I want to take a look at the x/y/z coordinate data. The docs give definitions for these fields:\n\nThe X coordinate in an X/Y/Z grid system used by lasers to pinpoint the ball when the shot ends. The value is zeros for the shot that finishes in the hole. The numbers in the grid system represent feet.\nThe Y coordinate in an X/Y/Z grid system used by lasers to pinpoint the ball when the shot ends. The value is zeros for the shot that finishes in the hole. The numbers in the grid system represent feet.\nThe Z coordinate in an X/Y/Z grid system used by lasers to pinpoint the ball when the shot ends. The value is zeros for the shot that finishes in the hole. The numbers in the grid system represent feet, and ‘Z’ is the vertical component of the position.\n\nThe shot that finishes in the hole will get 0 values, but these definitions don’t indicate whether the coordinates are relative to each hole or the overall course. Plotting the shots should help clear this up. Additionally, I need to convert the coordinate columns from character to numeric .\n\nlibrary(ggplot2)\n\n\nshot_level_clean %>% \n  mutate(x = str_replace_all(string = x_coordinate,\n                             pattern = \",\",\n                             replacement = \"\")) %>%\n  mutate(y = str_replace_all(string = y_coordinate,\n                             pattern = \",\",\n                             replacement = \"\")) %>% \n  mutate(z = str_replace_all(string = z_coordinate,\n                             pattern = \",\",\n                             replacement = \"\")) %>% \n  mutate(x = as.numeric(x),\n         y = as.numeric(y),\n         z = as.numeric(z)) %>% \n  ggplot(mapping = aes(x = x,\n                       y = y)) +\n  geom_point()\n\n\n\n\nThe non-zero shot coordinates look like a golf course, so I think it makes sense to set the 0 values to NA since the coordinates to not appear to match the grid system.\n\nshot_level_clean_coords <- shot_level_clean %>% \n  mutate(x = str_replace_all(string = x_coordinate,\n                             pattern = \",\",\n                             replacement = \"\")) %>%\n  mutate(y = str_replace_all(string = y_coordinate,\n                             pattern = \",\",\n                             replacement = \"\")) %>% \n  mutate(z = str_replace_all(string = z_coordinate,\n                             pattern = \",\",\n                             replacement = \"\")) %>% \n  mutate(x = as.numeric(x),\n         y = as.numeric(y),\n         z = as.numeric(z)) %>% \n  mutate(x = ifelse(x == 0,NA,x),\n         y = ifelse(y == 0,NA,y),\n         z = ifelse(z == 0,NA,z)) %>% \n  select(-x_coordinate,\n         -y_coordinate,\n         -z_coordinate)\n\nshot_level_clean_coords %>% \n  filter(!is.na(x)) %>% \n  mutate(hole = factor(hole, ordered = T)) %>%\n  ggplot(mapping = aes(x = x,\n                       y = y,\n                       color = hole)) +\n  geom_point() +\n  coord_equal() +\n  theme(axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.title = element_blank(),\n        panel.background = element_blank())\n\n\n\n\nDefinitely looks like a golf course, especially when you overlay it on top of the Google Maps view of East Lake Golf Club in Atlanta:\n\nNext I’d like to take a look at the cut3 information for each shot. The table has 4 columns with this information:\n\nTo Location (Scorer): General location from which the shot hit ended as recorded by the walking scorer\nTo Location (Laser): Enhanced location from which the shot hit ended as recorded by a laser device which tracks ball position using coordinates on a course map\nFrom Location (Scorer): General location from which the shot began as recorded by the walking scorer\nFrom Location (Laser): Enhanced location from which the shot began as recorded by a laser device which tracks ball position using coordinates on a course map\n\nThe x/y coordinate data matches the “to location” - so I’ll focus on those columns for now.\n\nshot_level_clean_coords %>% \n  filter(!is.na(x)) %>% \n  group_by(to_location_laser,\n           to_location_scorer) %>%\n  summarize(rows = n(),\n            .groups = \"keep\") %>% \n  as.data.frame() %>% \n  arrange(desc(rows))\n\n                to_location_laser to_location_scorer rows\n1                         Unknown              Green 3548\n2                    Left Fairway            Fairway  578\n3                   Right Fairway            Fairway  550\n4                      Left Rough      Primary Rough  436\n5                     Right Rough      Primary Rough  401\n6              Right Intermediate Intermediate Rough  145\n7               Left Intermediate Intermediate Rough  112\n8                         Unknown     Fairway Bunker   92\n9         Right Green Side Bunker  Green Side Bunker   77\n10  Right Front Green Side Bunker  Green Side Bunker   66\n11   Front Left Green Side Bunker  Green Side Bunker   60\n12         Left Green Side Bunker  Green Side Bunker   47\n13 Front Center Green Side Bunker  Green Side Bunker   34\n14                        Unknown       Tree Outline   24\n15                        Unknown              Water   23\n16                        Unknown            Unknown   20\n17                        Unknown         Water Drop   13\n18    Left Rear Green Side Bunker  Green Side Bunker    3\n19                   Left Fairway             Fringe    2\n20                  Right Fairway             Fringe    2\n21   Right Rear Green Side Bunker  Green Side Bunker    1\n22                        Unknown       Dirt Outline    1\n\n\nThe columns seem to match up pretty well, but I’d like to consolidate them into more general to_location column.\n\nshot_level_clean_coords_cut <- shot_level_clean_coords %>% \n  mutate(to_location = case_when(to_location_scorer %in% c('Fairway','Fringe') ~ 'Fairway',\n                                     to_location_scorer %in% c('Fairway Bunker','Green Side Bunker') ~ 'Bunker',\n                                     to_location_scorer %in% c('Intermediate Rough','Primary Rough') ~ 'Rough',\n                                     to_location_scorer == 'Green' ~ 'Green',\n                                     to_location_scorer == 'Water' ~ 'Water',\n                                     \n                                     is.na(x) ~ 'Hole',\n                                     T ~ 'Other'))\n\nshot_level_clean_coords_cut %>% \n  filter(!is.na(x)) %>% \n  group_by(to_location_laser,\n           to_location_scorer,\n           to_location) %>%\n  summarize(rows = n(),\n            .groups = \"keep\") %>% \n  as.data.frame() %>% \n  arrange(desc(rows))\n\n                to_location_laser to_location_scorer to_location rows\n1                         Unknown              Green       Green 3548\n2                    Left Fairway            Fairway     Fairway  578\n3                   Right Fairway            Fairway     Fairway  550\n4                      Left Rough      Primary Rough       Rough  436\n5                     Right Rough      Primary Rough       Rough  401\n6              Right Intermediate Intermediate Rough       Rough  145\n7               Left Intermediate Intermediate Rough       Rough  112\n8                         Unknown     Fairway Bunker      Bunker   92\n9         Right Green Side Bunker  Green Side Bunker      Bunker   77\n10  Right Front Green Side Bunker  Green Side Bunker      Bunker   66\n11   Front Left Green Side Bunker  Green Side Bunker      Bunker   60\n12         Left Green Side Bunker  Green Side Bunker      Bunker   47\n13 Front Center Green Side Bunker  Green Side Bunker      Bunker   34\n14                        Unknown       Tree Outline       Other   24\n15                        Unknown              Water       Water   23\n16                        Unknown            Unknown       Other   20\n17                        Unknown         Water Drop       Other   13\n18    Left Rear Green Side Bunker  Green Side Bunker      Bunker    3\n19                   Left Fairway             Fringe     Fairway    2\n20                  Right Fairway             Fringe     Fairway    2\n21   Right Rear Green Side Bunker  Green Side Bunker      Bunker    1\n22                        Unknown       Dirt Outline       Other    1\n\n\nNext - I want to plot `to_location` to see how it looks.\n\ncut_colors = c('Bunker'='tan',\n               'Fairway'='#4CBB17',\n               'Tee Box'='#4CBB17',\n               'Green'='#90EE90',\n               'Rough'='#355E3B',\n               'Other'='darkgray',\n               'Hole'='black',\n               'Water'='lightblue')\n\nshot_level_clean_coords_cut %>% \n  filter(!is.na(x)) %>% \n  mutate(hole = factor(hole, ordered = T)) %>%\n  ggplot(mapping = aes(x = x,\n                       y = y)) +\n  geom_point(mapping = aes(color = to_location),\n             size = 1) +\n  coord_equal() +\n  scale_color_manual(values = cut_colors) +\n  theme(axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.title = element_blank(),\n        panel.grid = element_blank())\n\n\n\n\n\nshot_level_clean_coords_cut %>% \n  filter(!is.na(x)) %>% \n  filter(hole == 1) %>% \n  mutate(hole = factor(hole, ordered = T)) %>%\n  ggplot(mapping = aes(x = x,\n                       y = y)) +\n  geom_point(mapping = aes(color = to_location),\n             size = 2) +\n  coord_equal() +\n  scale_color_manual(values = cut_colors) +\n  labs(title = \"1st Hole\") +\n  theme(axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.title = element_blank(),\n        panel.grid = element_blank())\n\n\n\n\nLastly, I’d like to add columns that indicate how many strokes are remaining for the player on the hole, since it does not appear like they are in the current data set.\n\nstrokes_remaining <- shot_level_clean_coords_cut %>% \n  group_by(player,\n           hole,\n           round) %>% \n  arrange(player,\n          round,\n          hole,\n          shot) %>% \n  mutate(strokes_rolling = cumsum(num_of_strokes)) %>% \n  mutate(strokes_remaining_before_shot = hole_score - strokes_rolling + 1,\n         strokes_remaining_after_shot = hole_score - strokes_rolling) %>%\n  ungroup() %>% \n  mutate(yards_out_after_shot = distance_to_hole_after_the_shot/36,\n         yards_out_before_shot = distance_to_pin/36) %>% \n  as.data.frame()\n\nstrokes_remaining %>% \n  filter(hole == 1,\n         round == 1,\n         player == 24924) %>% \n  select(shot,\n         strokes_rem_before = strokes_remaining_before_shot,\n         yards_out_before = yards_out_before_shot,\n         strokes_rem_after = strokes_remaining_after_shot,\n         yards_out_after = yards_out_after_shot) \n\n  shot strokes_rem_before yards_out_before strokes_rem_after yards_out_after\n1    1                  4       429.000000                 3      116.444444\n2    2                  3       116.444444                 2       10.722222\n3    3                  2        10.722222                 1        1.194444\n4    4                  1         1.194444                 0        0.000000\n\n\n\nstrokes_remaining %>% \n  filter(!is.na(x)) %>% \n  filter(hole == 1) %>% \n  mutate(strokes_remaining_after_shot = factor(strokes_remaining_after_shot, \n                                               ordered = T)) %>%\n  ggplot(mapping = aes(x = x,\n                       y = y,\n                       color = strokes_remaining_after_shot)) +\n  geom_point(size = 3) +\n  coord_equal() +\n  labs(title = \"1st Hole\") +\n  theme(axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.title = element_blank(),\n        panel.grid = element_blank())\n\n\n\n\n\nsaveRDS(object = strokes_remaining, file = \"shot_level.rds\")\nsaveRDS(object = cut_colors, file = \"cut_colors.rds\")\n\n\n\n\n\nFootnotes\n\n\nThe data was available here, but it looks like it’s been moved.↩︎\n# of Strokes (1 digit numeric): The number of strokes assessed for this shot. In most cases, this will be ‘1’, but it may be ‘0’ for a drop or ‘2’ for a 2-stroke penalty.↩︎\nfairway, rough, green, etc.↩︎"
  }
]